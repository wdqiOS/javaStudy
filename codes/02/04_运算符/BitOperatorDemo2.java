// 移位操作
public class BitOperatorDemo2 {
    public static void main(String[] args) {
        /*
            <<: 将操作数的二进制码整体左移指定位数，左移之后的空使用‘0’来补充。
            >>: 将操作数的二进制码整体右移指定位数，右移之后的空使用”符号位“来补充；
                若是正数使用”0“来补充；
                若是负数使用”1“来补充；
            >>>:将操作数的二进制码整体右移指定位数，右移之后的空位使用”0“来补充，结果为正数。

            2的二进制：
            00000000_00000000_00000000_00000010
            左移3位：
            00000_00000000_00000000_00000010000
            
            16的二进制：
            00000000_00000000_00000000_00010000
            右移3位：
            00000000000_00000000_00000000_00010
            



         */
        System.out.println(2 << 3); // 16
        System.out.println(16 >> 3);

        /*
            原码：10000000_00000000_00000000_00010000
            反码：11111111_11111111_11111111_11101111
            补码：11111111_11111111_11111111_11110000
            右移3位：
            11111111111_11111111_11111111_11110（-2的补码）
         */
        System.out.println(-16 >> 3);

        System.out.println(-16 >>> 3);
    }
}