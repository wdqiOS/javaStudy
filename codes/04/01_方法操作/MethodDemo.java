public class MethodDemo {

    /*
        方法格式：
        [修饰符] 返回值的类型 方法名称([形式参数,...]){
            方法体;
            [return 值];
        }

        方法必须调用才能生效（看着菜单点菜）
            如果方法使用了static修饰：
                使用方法所在类的名称.方法名(参数）
            如果方法没有使用static修饰：
                使用方法所在类的对象调用

        方法定义的位置：
            1）在类中定义，在Java中最小的程序单元是类。
            2）方法定义在其他方法之外，方法和方法是兄弟关系。
            3）方法定义的先后顺序不影响

            main方法专门有JVM负责调用，我们只负责启动JVM


        方法中的术语：
            修饰符：public，static等，static表示方法属于类，直接使用类名调用即可，现在都使用static修饰
            返回值类型：方法其实是在完成一个功能，该功能操作完成之后，是否需要给调用者返回一个结果。
                        如果不需要给调用者返回结果，此时使用关键字void来声明，无返回的意思。
            方法名称：遵循标识符的规范，使用动词表示，首字母小写。若是多个单词组成，使用驼峰表示法，以后每一个单词首字母都大写，例如：getEmployeeName.
            形式参数：方法圆括号中的变量，仅仅只是占位而已，参数的名称其实无所谓。形式参数可以有多个。
            参数列表：参数列表 == 参数的类型 + 参数的个数 + 参数的顺序。
            方法签名：方法签名 == 方法名称 + 方法参数列表；
                    在同一个类中，方法签名是唯一的，否则，编译报错。
            方法体：方法的{}中的代码，表示具体完成该功能的代码。
            返回值：在方法内部，使用return关键字；
                    功能1：给调用者返回一个结果值，此时该方法不能使用void修饰。
                    功能2：结束当前方法
            实际参数：调用者在调用某一个具体方法的时候，实际传递的参数值。


            方法的调用者：在哪里调用某一个方法，那么哪里就是该方法的调用者。


            如何定义方法：
                1）到底需要定义什么功能方法。
                2）是否需要定义返回值类型
                    如果不需要返回结果数据，此时使用void声明（无返回）
                    如果需要返回一个结果数据，我们就把该结果数据的类型作为该方法的返回值类型。
                例子：
                    打印操作：在乎的是方法执行的过程，而不是结果，所以此时使用void声明
                    求两个数之和：在乎方法执行的过程，并且执行完毕之后，需要给调用者一个反馈。

                3）是否需要形式参数
                    该方法在完成该功能的过程之中，是否有未知的因素参与，如果有请作为参数传递，如果没有，则没有形参。
                例子：
                    求两个数之和：这两个数到底是多少，其实对于方法来说，是未知的，仅仅是调用者知道，而且不同的调用者传递不同的参数值。

     */
    // 把共同的200行代码，抽离到方法中
    // 无参无返回
    static void doWork() {
        System.out.println("共同的200行代码");
    }
    
    public static void main(String[] args) {
        System.out.println("代码片段A");
        MethodDemo.doWork(); // 调用方法
        System.out.println("代码片段C");
        MethodDemo.doWork(); // 调用方法
        System.out.println("代码片段C");
        MethodDemo.doWork(); // 调用方法

    }
}